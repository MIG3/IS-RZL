//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ИС_ЕРЗ
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ИС_ЕРЗEntities1 : DbContext
    {
        public ИС_ЕРЗEntities1()
            : base("name=ИС_ЕРЗEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<ДПФС> ДПФС { get; set; }
        public virtual DbSet<Застрахованное_лицо> Застрахованное_лицо { get; set; }
        public virtual DbSet<Персоналные_данные> Персоналные_данные { get; set; }
        public virtual DbSet<СМО> СМО { get; set; }
        public virtual DbSet<Состтояние_на_учёте> Состтояние_на_учёте { get; set; }
        public virtual DbSet<Коды_субъектов> Коды_субъектов { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int Выбор_СМО(Nullable<System.DateTime> дата_рождения, string фамилия, string имя, string отчество, string пол, string номер_паспорта, string серия_паспорта, string сМО, string регион)
        {
            var дата_рожденияParameter = дата_рождения.HasValue ?
                new ObjectParameter("Дата_рождения", дата_рождения) :
                new ObjectParameter("Дата_рождения", typeof(System.DateTime));
    
            var фамилияParameter = фамилия != null ?
                new ObjectParameter("Фамилия", фамилия) :
                new ObjectParameter("Фамилия", typeof(string));
    
            var имяParameter = имя != null ?
                new ObjectParameter("Имя", имя) :
                new ObjectParameter("Имя", typeof(string));
    
            var отчествоParameter = отчество != null ?
                new ObjectParameter("Отчество", отчество) :
                new ObjectParameter("Отчество", typeof(string));
    
            var полParameter = пол != null ?
                new ObjectParameter("Пол", пол) :
                new ObjectParameter("Пол", typeof(string));
    
            var номер_паспортаParameter = номер_паспорта != null ?
                new ObjectParameter("Номер_паспорта", номер_паспорта) :
                new ObjectParameter("Номер_паспорта", typeof(string));
    
            var серия_паспортаParameter = серия_паспорта != null ?
                new ObjectParameter("Серия_паспорта", серия_паспорта) :
                new ObjectParameter("Серия_паспорта", typeof(string));
    
            var сМОParameter = сМО != null ?
                new ObjectParameter("СМО", сМО) :
                new ObjectParameter("СМО", typeof(string));
    
            var регионParameter = регион != null ?
                new ObjectParameter("Регион", регион) :
                new ObjectParameter("Регион", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Выбор_СМО", дата_рожденияParameter, фамилияParameter, имяParameter, отчествоParameter, полParameter, номер_паспортаParameter, серия_паспортаParameter, сМОParameter, регионParameter);
        }
    
        public virtual int Добавление_пользователя(Nullable<int> flag, string фамилия, string имя, string отчество, string пол, Nullable<System.DateTime> дата_рождения, string тип_документа, string номер, string серия, string название_СМО, string название_региона)
        {
            var flagParameter = flag.HasValue ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(int));
    
            var фамилияParameter = фамилия != null ?
                new ObjectParameter("Фамилия", фамилия) :
                new ObjectParameter("Фамилия", typeof(string));
    
            var имяParameter = имя != null ?
                new ObjectParameter("Имя", имя) :
                new ObjectParameter("Имя", typeof(string));
    
            var отчествоParameter = отчество != null ?
                new ObjectParameter("Отчество", отчество) :
                new ObjectParameter("Отчество", typeof(string));
    
            var полParameter = пол != null ?
                new ObjectParameter("Пол", пол) :
                new ObjectParameter("Пол", typeof(string));
    
            var дата_рожденияParameter = дата_рождения.HasValue ?
                new ObjectParameter("Дата_рождения", дата_рождения) :
                new ObjectParameter("Дата_рождения", typeof(System.DateTime));
    
            var тип_документаParameter = тип_документа != null ?
                new ObjectParameter("Тип_документа", тип_документа) :
                new ObjectParameter("Тип_документа", typeof(string));
    
            var номерParameter = номер != null ?
                new ObjectParameter("Номер", номер) :
                new ObjectParameter("Номер", typeof(string));
    
            var серияParameter = серия != null ?
                new ObjectParameter("Серия", серия) :
                new ObjectParameter("Серия", typeof(string));
    
            var название_СМОParameter = название_СМО != null ?
                new ObjectParameter("Название_СМО", название_СМО) :
                new ObjectParameter("Название_СМО", typeof(string));
    
            var название_регионаParameter = название_региона != null ?
                new ObjectParameter("Название_региона", название_региона) :
                new ObjectParameter("Название_региона", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Добавление_пользователя", flagParameter, фамилияParameter, имяParameter, отчествоParameter, полParameter, дата_рожденияParameter, тип_документаParameter, номерParameter, серияParameter, название_СМОParameter, название_регионаParameter);
        }
    
        public virtual int Изменение_паспорта(Nullable<int> flag, string имя, string фамилия, string отчество, string серия_паспорта, string номер_паспорта, Nullable<int> sorUp)
        {
            var flagParameter = flag.HasValue ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(int));
    
            var имяParameter = имя != null ?
                new ObjectParameter("Имя", имя) :
                new ObjectParameter("Имя", typeof(string));
    
            var фамилияParameter = фамилия != null ?
                new ObjectParameter("Фамилия", фамилия) :
                new ObjectParameter("Фамилия", typeof(string));
    
            var отчествоParameter = отчество != null ?
                new ObjectParameter("Отчество", отчество) :
                new ObjectParameter("Отчество", typeof(string));
    
            var серия_паспортаParameter = серия_паспорта != null ?
                new ObjectParameter("Серия_паспорта", серия_паспорта) :
                new ObjectParameter("Серия_паспорта", typeof(string));
    
            var номер_паспортаParameter = номер_паспорта != null ?
                new ObjectParameter("Номер_паспорта", номер_паспорта) :
                new ObjectParameter("Номер_паспорта", typeof(string));
    
            var sorUpParameter = sorUp.HasValue ?
                new ObjectParameter("SorUp", sorUp) :
                new ObjectParameter("SorUp", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Изменение_паспорта", flagParameter, имяParameter, фамилияParameter, отчествоParameter, серия_паспортаParameter, номер_паспортаParameter, sorUpParameter);
        }
    
        public virtual int Поиск_ЗЛ(string имя, string фамилия, string отчество, ObjectParameter id, ObjectParameter answer)
        {
            var имяParameter = имя != null ?
                new ObjectParameter("Имя", имя) :
                new ObjectParameter("Имя", typeof(string));
    
            var фамилияParameter = фамилия != null ?
                new ObjectParameter("Фамилия", фамилия) :
                new ObjectParameter("Фамилия", typeof(string));
    
            var отчествоParameter = отчество != null ?
                new ObjectParameter("Отчество", отчество) :
                new ObjectParameter("Отчество", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Поиск_ЗЛ", имяParameter, фамилияParameter, отчествоParameter, id, answer);
        }
    }
}
